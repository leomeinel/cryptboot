#!/usr/bin/env bash
###
# File: cryptboot
# Author: Leopold Meinel (leo@meinel.dev)
# -----
# Copyright (c) 2025 Leopold Meinel & contributors
# SPDX ID: GPL-3.0-or-later
# URL: https://www.gnu.org/licenses/gpl-3.0-standalone.html
# -----
###

# Fail on error
set -e

# Check if user is root
if [[ "${UID}" -ne 0 ]]; then
    echo "ERROR: You can only run this script as root"
    exit 1
fi

# Default path for cryptboot.conf
CONFIGURATION_FILE=/etc/cryptboot.conf

# EFI System partition mount point (has to be specified in /etc/fstab)
EFI_DIR="/efi"

# List of paths with images to sign
## Format: ("a" "b")
TO_SIGN=("EFI/Linux" "EFI/systemd" "EFI/BOOT")

# Source config
if [[ -f "${CONFIGURATION_FILE}" ]]; then
    # shellcheck source=/dev/null
    . "${CONFIGURATION_FILE}"
else
    echo "ERROR: ${CONFIGURATION_FILE} doesn't exist!"
    exit 1
fi

# Check if EFI_DIR mountpoint exists
if ! findmnt -sn "${EFI_DIR}" &>/dev/null; then
    echo "ERROR: Couldn't find EFI System partition mountpoint '${EFI_DIR}', check your /etc/fstab"
    exit 1
fi

case "${1}" in
systemd-boot-sign)
    # Sign files in TO_SIGN with UEFI secure boot keys
    echo "Signing kernel with UEFI secure boot keys..."
    for path in "${TO_SIGN[@]}"; do
        shopt -s nocaseglob
        for file in "${EFI_DIR}"/"${path}"/*.efi; do
            cryptboot-efikeys sign "${file}"
        done
    done

    # Synchronize cached writes to persistent storage
    sync
    ;;
*)
    # Print help
    echo "Usage: $(basename "${0}") {systemd-boot-sign}"
    echo ""
    echo "Manage UEFI Secure Boot keys"
    echo ""
    echo "Commands:"
    echo "    systemd-boot-sign  Sign kernel with UEFI secure boot keys"
    ;;
esac
