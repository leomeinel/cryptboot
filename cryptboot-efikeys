#!/usr/bin/env bash
###
# File: cryptboot-efikeys
# Author: Leopold Meinel (leo@meinel.dev)
# -----
# Copyright (c) 2025 Leopold Meinel & contributors
# SPDX ID: GPL-3.0-or-later
# URL: https://www.gnu.org/licenses/gpl-3.0-standalone.html
# -----
###

# Fail on error
set -e

# Define functions
log_err() {
    /usr/bin/logger -s -p local0.err <<<"${@}"
}
log_warning() {
    /usr/bin/logger -s -p local0.warning <<<"${@}"
}
check_arg() {
    if [[ -z "${2}" ]]; then
        log_err "You have to specify '[${1}]' as second argument."
        exit 1
    fi
}
checked_cd() {
    cd "${1:?}" ||
        {
            log_err "Could not 'cd' into '${1:?}'"
            exit 1
        }
}
exit_no_keys() {
    log_err "There are no UEFI Secure Boot keys in '${1:?}'."
    log_err "Please generate them first with '${2} create' and then enroll them with '${2} enroll'."
    exit 1
}
var_invalid_warning() {
    log_warning "'${1}' is invalid in '${2}'."
}

# Default path for cryptboot.conf
CONFIGURATION_FILE=/etc/cryptboot.conf

# UEFI Secure Boot keys directory
EFI_KEYS_DIR="/etc/secureboot"

# Option ROM
## See: https://github.com/Foxboron/sbctl/wiki/FAQ#option-rom
##      Setting ENABLE_OPROM="false" might soft brick your device. Make sure that your hardware doesn't need oproms
## If you plan on changing this setting after enrolling, you will have to issue the following commands again:
##     cryptboot-efikeys create
##     cryptboot-efikeys enroll [PK.key] [KEK.key]
##     cryptboot systemd-boot-sign
ENABLE_OPROM="true"

# Source config
if [[ -f "${CONFIGURATION_FILE}" ]]; then
    # shellcheck source=/dev/null
    . "${CONFIGURATION_FILE}"
else
    log_err "'${CONFIGURATION_FILE}' doesn't exist."
    exit 1
fi

# Create UEFI Secure Boot keys directory
mkdir -p "${EFI_KEYS_DIR:?}"/keys
chmod 700 "${EFI_KEYS_DIR:?}"/keys
mkdir -p "${EFI_KEYS_DIR:?}"/backup/keys
chmod 700 "${EFI_KEYS_DIR:?}"/backup/keys

# Check if user is root
if [[ "${UID}" -ne 0 ]]; then
    log_err "You can only run this script as root."
    exit 1
fi

case "${1}" in
create)
    # cd to EFI_KEYS_DIR/keys
    checked_cd "${EFI_KEYS_DIR:?}/keys"

    # Prompt to confirm erasure of UEFI Secure Boot keys in EFI_KEYS_DIR/keys
    for file in "${EFI_KEYS_DIR:?}"/keys/*; do
        [[ -f "${file}" ]] ||
            {
                var_invalid_warning "${file}" "${EFI_KEYS_DIR:?}/keys/*"
                continue
            }
        DATE="$(date +"%FT%H-%M-%S")"
        BACKUP_PATH="${EFI_KEYS_DIR:?}"/backup/keys/"${DATE}".bak
        log_warning "UEFI Secure Boot keys in '${EFI_KEYS_DIR:?}/keys' already exists."
        log_warning "A backup will be created at '${BACKUP_PATH:?}'."
        read -rp "Do you want to delete them and generate new ones? (Type 'yes' in capital letters): " choice
        case "${choice}" in
        "YES")
            cp -R "${EFI_KEYS_DIR:?}"/keys "${BACKUP_PATH:?}"
            chmod 000 "${BACKUP_PATH:?}"/*
            rm -rf "${EFI_KEYS_DIR:?}"/keys/*
            ;;
        *)
            log_err "User aborted generating secureboot keys."
            exit 1
            ;;
        esac
        break
    done
    echo "Creating new UEFI Secure Boot keys..."

    # Prompt for common name and save to ./NAME
    read -rp "Enter a Common Name: " NAME
    echo "${NAME}" >NAME

    # Generate PEM format private keys for EFI binary and EFI signature list signing and PEM format certificates for sbsign(1), sbvarsign(1) and sign-efi-sig-list(1) -> .key, .crt
    # See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    openssl req -newkey rsa:4096 -nodes -keyout PK.key -new -x509 -sha256 -days 3650 -subj "/CN=${NAME} PK/" -out PK.crt
    openssl req -newkey rsa:4096 -nodes -keyout KEK.key -new -x509 -sha256 -days 3650 -subj "/CN=${NAME} KEK/" -out KEK.crt
    openssl req -newkey rsa:4096 -nodes -keyout db.key -new -x509 -sha256 -days 3650 -subj "/CN=${NAME} db/" -out db.crt

    # Generate DER format certificates for firmware -> .cer
    # See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    openssl x509 -outform DER -in PK.crt -out PK.cer
    openssl x509 -outform DER -in KEK.crt -out KEK.cer
    openssl x509 -outform DER -in db.crt -out db.cer

    # Create a GUID for owner identification
    # See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    GUID="$(uuidgen --random)"
    echo "${GUID}" >GUID

    # Generate Certificates in an EFI Signature List for sbvarsign(1), efi-updatevar(1), KeyTool and firmware -> .esl
    # See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    cert-to-efi-sig-list -g "${GUID}" PK.crt PK.esl
    cert-to-efi-sig-list -g "${GUID}" KEK.crt KEK.esl
    cert-to-efi-sig-list -g "${GUID}" db.crt db.esl

    # Obtain MS_OpROM_db
    if [[ "${ENABLE_OPROM}" == "true" ]]; then
        ## Save MSGUID
        MSGUID="77fa9abd-0359-4d32-bd60-28f4e78f784b"
        echo "${MSGUID}" >MSGUID
        ## curl PEM format certificates for sbsign(1), sbvarsign(1) and sign-efi-sig-list(1) -> .crt
        ### FIXME: This expires 2026-06-27 GMT
        curl -s https://www.microsoft.com/pkiops/certs/MicCorUEFCA2011_2011-06-27.crt >MS_OpROM_db.crt
        ## Create EFI Signature List for sbvarsign(1), efi-updatevar(1), KeyTool and firmware -> .esl
        ## See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
        sbsiglist --owner "${MSGUID}" --type x509 --output MS_OpROM_db.esl MS_OpROM_db.crt
    fi

    # Generate Certificates in an EFI Signature List with an authentication header (i.e. a signed certificate update file) for efi-updatevar(1), sbkeysync, KeyTool and firmware -> .auth
    # See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    sign-efi-sig-list -g "${GUID}" -k PK.key -c PK.crt PK PK.esl PK.auth
    ## Sign an empty file to allow removing Platform Key when in "User Mode"
    ## See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
    sign-efi-sig-list -g "${GUID}" -k PK.key -c PK.crt PK /dev/null PK_null.auth
    sign-efi-sig-list -g "${GUID}" -k PK.key -c PK.crt KEK KEK.esl KEK.auth
    sign-efi-sig-list -g "${GUID}" -k KEK.key -c KEK.crt db db.esl db.auth

    # Generate Certificates in an EFI Signature List for MS_OpROM_db
    if [[ "${ENABLE_OPROM}" == "true" ]]; then
        ## Generate Certificates in an EFI Signature List with an authentication header (i.e. a signed certificate update file) for efi-updatevar(1), sbkeysync, KeyTool and firmware -> .auth
        ## See: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Creating_keys
        sign-efi-sig-list -g "${MSGUID}" -k KEK.key -c KEK.crt db MS_OpROM_db.esl MS_OpROM_db.auth
    fi

    # chmod EFI_KEYS_DIR/keys/*
    chmod 000 "${EFI_KEYS_DIR:?}"/keys/*

    # Synchronize cached writes to persistent storage
    sync

    # Notify user if script has finished successfully
    echo "New UEFI Secure Boot keys created in '${EFI_KEYS_DIR:?}/keys'."
    ;;
enroll)
    read -rp "Do you understand that this can brick your device? Aborting now leaves secureboot disabled. (Type 'yes i understand' in capital letters): " choice
    case "${choice}" in
    "YES I UNDERSTAND")
        echo "Enrolling UEFI Secure Boot keys..."
        ;;
    *)
        log_err "User aborted enrolling secureboot keys."
        exit 1
        ;;
    esac
    # cd to EFI_KEYS_DIR/keys and check arguments
    checked_cd "${EFI_KEYS_DIR:?}/keys"
    PK="${2}"
    KEK="${3}"
    check_arg "PK.key" "${PK}"
    check_arg "KEK.key" "${KEK}"

    # Check for keys
    if [[ "${ENABLE_OPROM}" == "true" ]]; then
        if ! [[ -f KEK.esl ]] || ! [[ -f db.esl ]] || ! [[ -f PK.auth ]] || ! [[ -f MS_OpROM_db.esl ]]; then
            exit_no_keys "${EFI_KEYS_DIR:?}/keys" "${0}"
        fi
    else
        if ! [[ -f KEK.esl ]] || ! [[ -f db.esl ]] || ! [[ -f PK.auth ]]; then
            exit_no_keys "${EFI_KEYS_DIR:?}/keys" "${0}"
        fi
    fi

    # Enroll KEK and db
    ## Change file attributes
    for file in /sys/firmware/efi/efivars/PK*; do
        [[ -f "${file}" ]] ||
            {
                var_invalid_warning "${file}" "/sys/firmware/efi/efivars/PK*"
                continue
            }
        chattr -i "${file}" || true
    done
    for file in /sys/firmware/efi/efivars/KEK*; do
        [[ -f "${file}" ]] ||
            {
                var_invalid_warning "${file}" "/sys/firmware/efi/efivars/KEK*"
                continue
            }
        chattr -i "${file}" || true
    done
    for file in /sys/firmware/efi/efivars/db*; do
        [[ -f "${file}" ]] ||
            {
                var_invalid_warning "${file}" "/sys/firmware/efi/efivars/db*"
                continue
            }
        chattr -i "${file}" || true
    done
    ## Reset system to setup mode
    efi-updatevar -d 0 -k "${PK}" PK || true
    ## Enroll
    echo "Enrolling UEFI Secure Boot KEK key..."
    efi-updatevar -k "${PK}" -f KEK.auth KEK
    echo "Enrolling UEFI Secure Boot db key..."
    efi-updatevar -k "${KEK}" -f db.auth db

    # Enroll MS_OpROM_db
    if [[ "${ENABLE_OPROM}" == "true" ]]; then
        ## Change file attributes
        for file in /sys/firmware/efi/efivars/db*; do
            [[ -f "${file}" ]] ||
                {
                    var_invalid_warning "${file}" "/sys/firmware/efi/efivars/db*"
                    continue
                }
            chattr -i "${file}" || true
        done
        ## Enroll
        echo "Enrolling UEFI Secure Boot MS_OpROM_db key..."
        efi-updatevar -k "${KEK}" -a -f MS_OpROM_db.auth db
    fi

    # Enroll PK
    echo "Enrolling UEFI Secure Boot PK key..."
    efi-updatevar -k "${PK}" -f PK.auth PK

    # Notify user if script has finished successfully
    echo "UEFI Secure Boot keys in '${EFI_KEYS_DIR:?}/keys' enrolled to UEFI firmware."
    echo "You should now sign your boot loader and reboot."
    ;;
sign)
    # cd to EFI_KEYS_DIR/keys and check arguments
    checked_cd "${EFI_KEYS_DIR:?}/keys"
    FILENAME="${2}"
    check_arg "file" "${FILENAME}"

    # Check for keys
    if ! [[ -f db.key ]] || ! [[ -f db.crt ]]; then
        exit_no_keys "${EFI_KEYS_DIR:?}/keys" "${0}"
    fi

    # Sign FILENAME
    sbverify --cert db.crt "${FILENAME}" ||
        {
            echo "Signing file '${FILENAME}' with UEFI Secure Boot keys..."
            sbsign --key db.key --cert db.crt --output "${FILENAME}" "${FILENAME}"

            ## Synchronize cached writes to persistent storage
            sync
        }
    ;;
verify)
    # cd to EFI_KEYS_DIR/keys and check arguments
    checked_cd "${EFI_KEYS_DIR:?}/keys"
    FILENAME="${2}"
    check_arg "file" "${FILENAME}"

    # Check for keys
    if ! [[ -f db.crt ]]; then
        exit_no_keys "${EFI_KEYS_DIR:?}/keys" "${0}"
    fi

    # List signatures in FILENAME
    echo "List of all signatures in '${FILENAME}':"
    sbverify --list "${FILENAME}"
    echo ""

    # Verify FILENAME
    echo "Verifying signature with UEFI Secure Boot keys..."
    sbverify --cert db.crt "${FILENAME}"
    ;;
list)
    # List all UEFI Secure Boot keys enrolled in your UEFI firmware
    echo "All UEFI Secure Boot keys enrolled in your UEFI firmware:"
    efi-readvar
    ;;
status)
    # Check if UEFI Secure Boot is active or inactive
    echo -n "UEFI Secure Boot status: "
    SECUREBOOT_ENABLED="$(od -An -t u1 --read-bytes=1 --skip-bytes=4 /sys/firmware/efi/efivars/SecureBoot-*)"
    if ! [[ "${SECUREBOOT_ENABLED}" -eq 1 ]]; then
        echo "INACTIVE"
        exit 1
    fi
    echo "ACTIVE"
    ;;
*)
    # Print help
    echo "Usage: $(basename "${0}") {create,list,status}"
    echo "       $(basename "${0}") {enroll} [PK.key] [KEK.key]"
    echo "       $(basename "${0}") {sign,verify} [file]"
    echo ""
    echo "Manage UEFI Secure Boot keys"
    echo ""
    echo "Commands:"
    echo "    create  Generate new UEFI Secure Boot keys"
    echo "    enroll  Enroll new UEFI Secure Boot keys to your UEFI firmware"
    echo "            (you have to clear old keys in your UEFI firmware setup utility first)"
    echo "    sign    Sign EFI boot image file with your UEFI Secure Boot keys"
    echo "    verify  Verify signature of EFI boot image file with your UEFI Secure Boot keys"
    echo "    list    List all UEFI Secure Boot keys enrolled in your UEFI firmware"
    echo "    status  Check if UEFI Secure Boot is active or inactive"
    ;;
esac
